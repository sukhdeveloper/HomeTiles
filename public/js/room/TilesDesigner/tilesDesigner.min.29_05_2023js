"use strict";
var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
    return typeof e
} : function(e) {
    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
};
(function() {
    "use strict";

    function e(e) {
        this.id = e.id, this.file = e.file, this.icon = e.icon, this.name = e.name, this.width = e.width, this.height = e.height, this.shape = e.shape
    }

    function t(t) {
        e.call(this, t), this.name || (this.name = this.extractNameFromUrl()), this.suggestions = t.suggestions, this.baseTileUrl = t.file
    }

    function a(t) {
        e.call(this, t), this.parseSettings(t.settings), this.name = this.extractNameFromUrl(this.baseTileUrl)
    }

    function i(e) {
        function a() {
            var e = o.val();
            l.forEach(function(t) {
                t.displayByShape(e)
            })
        }

        function i(e) {
            //console.log('Value get of category',e);
            var new_arr = [e[0],e[3],e[1]];
            console.log('New array',new_arr);
            o.html(""),new_arr.forEach(function(e) {
                
                var t = e.charAt(0).toUpperCase() + e.slice(1);
                var txt = t.split(" - ").pop();
                console.log('Text',t );
                if(t != '4 - Borders'){
                "square" === e ? o.append("<option value=\"" + e + "\" selected>" + txt + "</option>") : o.append("<option value=\"" + e + "\">" + txt + "</option>")
                }
                }), o.change(function() {
                return a()
            }), a()
        }

        function n(a) {
            if (Array.isArray(a) && 0 < a.length) {
                var n = $("#td-blank-tiles");
                n.html("");
                var o = [];
                a.forEach(function(a) {
                    var i = new t(a),
                        s = i.createElement(function() {
                            e(i)
                        });
                    n.append(s), l.push(i), -1 === o.indexOf(i.shape) && o.push(i.shape)
                }), i(o)
            }
        }
        var l = [],
            o = $("#category");
        this.findByUrl = function(e) {
            var t;
            return l.some(function(a) {
                if (a.file === e) return t = a, !0
            }), t
        }, this.addSuggestion = function(e, t) {
            var a = this.findByUrl(e);
            a && a.addSuggestion(t)
        }, $.get("/tilesdesigner/blanktiles", function(e) {
            //console.log('checking on change value');
            n(e)
        })
    }

    function n(e, t) {
        //console.log('Image Get Data');
        function a(e, a) {
            var n = new Image;
            n.onload = function() {
                if (p.width = n.width, p.height = n.height, g.width = n.width, g.height = n.height, r.width = n.width, r.height = n.height, d.drawImage(n, 0, 0), o.blank) {
                    for (var e, l = d.getImageData(0, 0, r.width, r.height), s = 0; s < l.data.length; s += 4) e = 0 === l.data[s] && 0 === l.data[s + 1] && 0 === l.data[s + 2], e || (l.data[s] = 255, l.data[s + 1] = 255, l.data[s + 2] = 255);
                    m.putImageData(l, 0, 0)
                } else {
                    if ("string" == typeof a) {
                        var i = new Image;
                        i.onload = function() {
                            r.width = i.width, r.height = i.height, d.drawImage(i, 0, 0)
                        }, i.src = a
                    }
                    m.drawImage(n, 0, 0)
                }
                f.changed = !0, f.loaded = !0, t.updateUsedList(p), o.update()
            }, n.src = e
        }

        function n(e) {
            if (e && "string" == typeof e) {
                var t = e.match(/[^/]+(?=\.\w+$)/)[0].replace("_", " ");
                o.name = t.charAt(0).toUpperCase() + t.slice(1)
            } else o.name = "Tile";
            $("#tilesDesignerPatternName").text(o.name)
        }

        function l(e) {
            o.tile = e, o.blank = !0 === e.blank, n(e.baseTileUrl), a(e.file, e.baseTileUrl)
        }
        var o = this,
            s = void 0,
            r = document.createElement("canvas"),
            d = r.getContext("2d"),
            g = document.createElement("canvas"),
            c = g.getContext("2d"),
            p = document.getElementById(e),
            m = p.getContext("2d"),
            f = function() {
                var e = !1,
                    t = !1,
                    a = $("#tilesDesignerSaveBtn");
                return {
                    get loaded() {
                        return e
                    },
                    set loaded(t) {
                        e = !!t, $("#tilesDesignerDownloadBtn").prop("disabled", !e), $("#tilesDesignerVisualizeBtn").prop("disabled", !e)
                    },
                    get changed() {
                        return t
                    },
                    set changed(e) {
                        t = !!e, a.prop("disabled", !t), $.prop("disabled", !t)
                    }
                }
            }();
        p.addEventListener("click", function(e) {
            var a = p.width / p.clientWidth,
                n = p.height / p.clientHeight,
                l = h(e.offsetX * a),
                s = h(e.offsetY * n),
                u = d.getImageData(l, s, 1, 1).data,
                w = 0 === u[0] && 0 === u[1] && 0 === u[2];
            if (!w) {
                for (var v = d.getImageData(0, 0, r.width, r.height), x = 0; x < v.data.length; x += 4) t.isEqual(u, v.data, x) ? (v.data[x] = t.selected.arr[0], v.data[x + 1] = t.selected.arr[1], v.data[x + 2] = t.selected.arr[2], v.data[x + 3] = t.selected.arr[3]) : (v.data[x] = 0, v.data[x + 1] = 0, v.data[x + 2] = 0, v.data[x + 3] = 0);
                c.putImageData(v, 0, 0), m.drawImage(g, 0, 0), t.updateUsedList(p), o.update(), f.changed = !0
            }
        }, !1), this.toCanvas = function(e, t) {
            if (f.loaded) {
                var a = h(e || p.width),
                    i = h(t || p.height);
                return u.steppedResize(p, a, i)
            }
        }, this.saveAsSuggestion = function(e) {
            $.ajax({
                method: "POST",
                url: "/customtile/save-suggestion",
                dataType: "json",
                data: {
                    _token: $("meta[name=csrf-token]").attr("content"),
                    index: e || 0,
                    shape: this.tile.shape || "square",
                    image: p.toDataURL(),
                    baseTileUrl: this.tile.baseTileUrl
                },
                success: function(e) {
                    s.addSuggestion(o.tile.baseTileUrl, e.file), l(o.tile)
                },
                error: function(e) {
                    console.log(e)
                }
            })
        }, this.save = function(e) {
            if (f.loaded && f.changed) {
                f.changed = !1;
                var a = "hexagon" === this.tile.shape;
                $.ajax({
                    method: "POST",
                    url: "/customtile/save",
                    dataType: "json",
                    data: {
                        _token: $("meta[name=csrf-token]").attr("content"),
                        id: this.tile.id,
                        shape: a ? "hexagon" : "square",
                        width: a ? 230 : 200,
                        height: 200,
                        image: p.toDataURL(),
                        settings: JSON.stringify({
                            baseTileUrl: this.tile.baseTileUrl,
                            usedColorNames: t.getUsedNames()
                        })
                    },
                    success: function(t) {
                        "function" == typeof e && e(t)
                    },
                    error: function(e) {
                        console.log(e)
                    }
                })
            }
        }, this.load = l, s = new i(l)
    }

    function l(e) {
        function t() {
            for (var e, t = 0; t < 12; t += 1) e = $("<div/>"), s.push(e), o.append(e)
        }

        function i() {
            if (0 < s.length) {
                var e = s.pop();
                e.remove()
            }
        }

        function n(t) {
            if ("object" === ("undefined" == typeof t ? "undefined" : _typeof(t))) {
                var n = new a(t),
                    l = n.createElement(function() {
                        e(n)
                    });
                return o.prepend(l), i(), n
            }
        }

        function l(e) {
            window.TracingIdea && window.TracingIdea.TileVisualizer && "function" == typeof window.TracingIdea.TileVisualizer.addTile && "object" === ("undefined" == typeof e ? "undefined" : _typeof(e)) && window.TracingIdea.TileVisualizer.addTile({
                id: e.id,
                custom: !0,
                name: e.name,
                width: e.width,
                height: e.height,
                shape: e.shape,
                file: e.file,
                usedColors: Array.isArray(e.usedColorNames) ? e.usedColorNames.join(" / ") : "",
                needsRotate: !("hexagon" !== e.shape) || ""
            })
        }
        var o = $("#tilesDesignerSavedTiles"),
            s = [];
        this.add = function(e) {
                var t = n(e);
                l(t)
            },
            function() {
                $.get("/customtiles", function(e) {
                    Array.isArray(e) && e.forEach(function(e) {
                        n(e)
                    })
                }), t()
            }()
    }

    function o(e, t) {
        function a() {
            I = !0
        }

        function i() {
            I = !1
        }

        function n(e) {
            if (I)
                if (e.target) {
                    console.log('hexagon selected');
                    var a = 90;
                    "hexagon" === t.tile.shape && (a = 60);
                    var i = a / 2,
                        n = e.target.get("angle"),
                        l = n + i - (n + i) % a + a;
                    n > 360 - i && (e.target.set({
                        angle: n - 360
                    }), l = a), e.target.bringToFront(), e.target.animate("angle", l, {
                        onChange: S.renderAll.bind(S)
                    })
                } else {
                    console.log('Fill Clone');
                    var o = fabric.util.object.clone(T);
                    
                    "hexagon" === t.tile.shape ? o.set({
                        left: 27 * (g((e.e.offsetX - 27) / 27) + 1),
                        top: (g((e.e.offsetY - b) / b) + 1) * b - v
                    }) : o.set({
                        left: 81 * g((e.e.offsetX - 27) / 81) + 40,
                        top: 81 * g((e.e.offsetY - 27) / 81) + 40
                    }), S.add(o), S.renderAll()
                }
        }

        function l() {
            fabric.Object.prototype.set({
                borderColor: "rgba(255, 255, 255, 0)",
                cornerColor: "rgba(255, 255, 255, 0)",
                fill: "rgba(0, 0, 0, 0)",
                originX: "center",
                originY: "center",
                lockScalingX: !0,
                lockScalingY: !0,
                lockRotation: !0,
                lockSkewingX: !0,
                lockSkewingY: !0,
                lockUniScaling: !0,
                lockScalingFlip: !0
            })
        }

        function o() {
            //console.log('create_square');
            //console.log('--fond'+category);
            var category =  $("#category").val();
            //console.log('category', category);
            if(category == '2 - Risers'){
                $('.canvas-container').css('display','none');
                $('#edit-wrap canvas#td-custom-tile').addClass('risers_select');
             if (S.backgroundColor = "#ffffff", !C.square) {
                C.square = new fabric.Group;
                for (var e = 0; 11 > e; e += 1) C.square.add(new fabric.Line([0, 0, 864, 0], {
                    left: 0,
                    top: 81 * e,
                    stroke: "#bfbfbf"
                }));
                for (var t = 0; 9 > t; t += 1) C.square.add(new fabric.Line([0, 0, 0, 1080], {
                    left: 81 * t,
                    top: 0,
                    stroke: "#bfbfbf" 
                }))
            }
            S.add(C.square), C.square.sendToBack()

            } else{
                $("#tilesDesignerClearBtn").removeAttr('disabled');
                $('.canvas-container').css('display','block');
                $('#edit-wrap canvas#td-custom-tile').removeClass('risers_select');
                if (S.backgroundColor = "#ffffff", !C.square) {
                    C.square = new fabric.Group;
                    for (var e = 0; 13 > e; e += 1) C.square.add(new fabric.Line([0, 0, 1000, 0], {
                        left: 0,
                        top: 81 * e,
                        stroke: "#bfbfbf"
                    }));
                    for (var t = 0; 11 > t; t += 1) C.square.add(new fabric.Line([0, 0, 0, 1400], {
                        left: 81 * t,
                        top: 0,
                        stroke: "#bfbfbf"
                    })) 
            }
            S.add(C.square), C.square.sendToBack()
           } 
        }

        function s() {
             
            if (S.backgroundColor = "transparent", !C.hexagon) {
                C.hexagon = new fabric.Group;
                for (var e = {
                        width: 81,
                        height: w,
                        stroke: "#bfbfbf",
                        selectable: !1,
                        fill: "#ffffff",
                        blankTile: !0
                    }, t = 0; 11 > t; t += 1)
                    for (var a = 0; 8 > a; a += 1)
                        if (0 != t % 2 || 0 != a) {
                            var i = new fabric.Polygon([{
                                    x: 0,
                                    y: v
                                }, {
                                    x: 0,
                                    y: b
                                }, {
                                    x: 27,
                                    y: w
                                }, {
                                    x: 81,
                                    y: b
                                }, {
                                    x: 81,
                                    y: v
                                }, {
                                    x: 27,
                                    y: 0
                                }], e),
                                n = 1 == t % 2 ? 27 : 0;
                            i.set({
                                left: 81 * a + n,
                                top: t * b + x
                            }), C.hexagon.add(i)
                        }
            }
            S.add(C.hexagon), C.hexagon.sendToBack()
        }
        /*Created function for Hexagon*/
        function sNew() {
            //console.log('value of W',w);
            if (S.backgroundColor = "transparent", !C.hexagon) {
                C.hexagon = new fabric.Group;
                for (var e = {
                        width: 81 ,
                        height: w,
                        stroke: "#fffff",
                        selectable: !1,
                        fill: "#fffff",
                        blankTile: !0
                    }, t = 0; 11 > t; t += 1)
                    for (var a = 0; 8 > a; a += 1)
                        if (0 != t % 2 || 0 != a) {
                            var i = new fabric.Polygon([{
                                    x: 0,
                                    y: v
                                }, {
                                    x: 0,
                                    y: b
                                }, {
                                    x: 27,
                                    y: w
                                }, {
                                    x: 81,
                                    y: b
                                }, {
                                    x: 81,
                                    y: v
                                }, {
                                    x: 27,
                                    y: 0
                                }], e),
                                n = 1 == t % 2 ? 27 : 0;
                                //console.log('Addition value n= ');
                                //console.log(n);
                             var left =  81 * a + n;
                             left = left - 22;
                             var top =  t * b + x;
                             top = top + 10;
                            // console.log('top========',top);
                            i.set({
                                left: left,
                                top: top
                            }), C.hexagon.add(i)
                        }
            }
            S.add(C.hexagon), C.hexagon.sendToBack()
        }



        function r(e) {
            $('#edit-wrap canvas').css('visibility','visible');
            $('.canvas-container').css('visibility','visible');
        // Update code according to category
        var category =  $("#category").val();
        
            
            S.setWidth(486), S.setHeight(646), o(), T = new fabric.Image(e);
           //console.log('----'+e);
        t = new fabric.Image(e);
        
        if(category == 'Hexagon'){
            for (var t = 0; t < 7; t += 1)
                for (var a, i = 0; 5 > i; i += 1)
                    if (a = 0 == t || 7 == t || 0 == i || 5 == i, !a) {
                        var n = fabric.util.object.clone(T);
                        n.set({
                            left: 81 * i + 40,
                            top: 81 * t + 40
                        }), S.add(n)
                    }
                
        } else{
           // console.log('else part');
            for (var t = 0; t < 7; t += 1)
                for (var a, i = 0; 5 > i; i += 1)
                    if (a = 0 == t || 7 == t || 0 == i || 5 == i, !a) {
                        var n = fabric.util.object.clone(T);
                        n.set({
                            left: 81 * i + 40,
                            top: 81 * t + 40
                        }), S.add(n)
                    }

           }
            		
        }

        function d(e) {
            S.setWidth(432), S.setHeight(y), s(), T = new fabric.Image(e);
            for (var t = 0; t < 11; t += 1)
                for (var a = 0; a < 8; a += 1)
                    if (0 != t % 2 || 0 != a) {
                        var i = 0 == t || t == 10 || 0 == a || a == 7 || 1 == a && 0 == t % 2;
                        if (!i) {
                            var n = fabric.util.object.clone(T),
                                l = 1 == t % 2 ? 27 : 0;
                            n.set({
                                left: a * 81 + 2,
                                top: t * b + x
                            }), S.add(n)
                        }
                    }
        }
        var g = Math.round,
            c = 10,
            h = c + 1,
            m = 81,
            f = m,
            w = 1.1547005383792517 * f,
            v = .25 * w,
            x = w / 2,
            b = .75 * w,
            y = b * h + v,
            T = void 0,
            S = new fabric.Canvas(e),
            C = {},
            I = !1;
        this.update = function() {
               // console.log('Image created drag over');
                if (S.clear(), "hexagon" === t.tile.shape) {
                    var e = t.toCanvas(m, w);
                    e && d(e)
                } else {
                    var a = t.toCanvas(m, f);
                    a && r(a)
                }
                S.renderAll()
            }, this.fill = function(e) {
                if (S.clear(), p.clear(), "hexagon" === e.shape) {
                    if (e.image) {
                        var t = u.steppedResize(e.image, m, w);
                        d(t), p.add(e)
                    }
                } else if (e.image) {
                    var a = u.steppedResize(e.image, m, f);
                    r(a), p.add(e)
                }
                S.renderAll()
            },
            function() {
                
                S.setWidth($("#edit-wrap svg").width()), S.setHeight($("#edit-wrap svg").height()), S.selection = !1, S.hoverCursor = "pointer", S.moveCursor = "pointer", S.defaultCursor = "pointer", S.on("mouse:down", a), S.on("mouse:move", i), S.on("mouse:up", n), S.on("object:moving", function(e) {
                    $('#edit-wrap svg').css('display','none');
                    console.log('===select here to see color');
                    "hexagon" === t.tile.shape ? e.target.set({
                        left: (g((e.target.left - 27) / 27) + 1) * 27,
                        top: (g((e.target.top - b) / b) + 1) * b - v
                    }) : e.target.set({
                        left: g((e.target.left - 27) / 81) * 81 + 27,
                        top: g((e.target.top - 27) / 81) * 81 + 27
                    })
                }), l()
            }(),
            function() {
            
                var e;
                document.addEventListener("dragstart", function(t) {
                    console.log('Drag');
                    e = t.target && t.target.classList.contains("draggable") ? t.target : void 0
                }, !1);
                var a = $(".upper-canvas")[0];
                a.addEventListener("dragover", function(e) {
                   console.log('Click here to draw object');
                    e.preventDefault()
                    // Click here to see result
                   // console.log('Click here to see results'); 
                }, !1), a.addEventListener("drop", function(a) {
                    //console.log('Drag here'); 
                    if (a.preventDefault(), e) { 
                        if (p.add(e.tile), "hexagon" === t.tile.shape) {
                            var i = u.steppedResize(e, 81, w);
                            T = new fabric.Image(i), T.set({
                                width: 81,
                                height: w,
                                left: 27 * (g((a.offsetX - 27) / 27) + 1),
                                top: (g((a.offsetY - b) / b) + 1) * b - v
                            })
                        } else {
                            var n = u.steppedResize(e, 81, 81);
                            T = new fabric.Image(n), T.set({
                                width: 81,
                                height: 81,
                                left: 81 * g((a.offsetX - 27) / 81) + 54,
                                top: 81 * g((a.offsetY - 27) / 81) + 54
                            })
                        }
                        S.add(T), S.renderAll(), e = void 0
                    }
                }, !1)
            }()
    }

    function s(e, t) {
        return "undefined" == typeof t ? e : -1 === e.indexOf("{s}") ? e + ": " + t : e.replace("{s}", t)
    }

    function r(e) {
        function t(e, t) {
            if (Array.isArray(l.tiles) && l.tiles.length) {
                var a = document.getElementById("topPanelTilesListUl"),
                    i = l.tiles.map(function(t, a) {
                        var i = "";
                        return "string" == typeof t[e] ? i = t[e].trim().toLowerCase() : "number" == typeof t[e] && (i = t[e]), {
                            value: i,
                            index: a
                        }
                    });
                i.sort(function(e, a) {
                    if (e.value > a.value) return t;
                    return e.value < a.value ? -t : 0
                }), i.forEach(function(e) {
                    var t = l.tiles[e.index];
                    t.custom ? a.insertBefore(t.li, a.firstChild) : a.appendChild(t.li)
                }), l.tiles.showIcons()
            }
        }

        function a(e) {
            var t = document.createElement("div");
            return t.className = "top-panel-content-tiles-list-item", t.innerHTML = "<div class=\"tile-list-thumbnail-image-holder\">\n                <img src=\"" + e.file + "\" class=\"tile-list-thumbnail\">\n            </div>\n            " + e.getInfoText(), t
        }

        function i() {
            var e = $("#dialogSavedRoomUrlInput").val();
            if (e)
                if (window.sidebar && window.sidebar.addPanel) window.sidebar.addPanel(document.title, e, "");
                else if (window.external && window.external.hasOwnProperty("AddFavorite")) window.external.AddFavorite(e, document.title);
            else if (window.opera && window.print) {
                var t = document.createElement("a");
                t.setAttribute("href", e), t.setAttribute("title", document.title), t.setAttribute("rel", "sidebar"), t.click()
            } else {
                var a = -1 === navigator.userAgent.toLowerCase().indexOf("mac") ? "CTRL" : "Command/Cmd";
                l.showAlert("Press " + a + " + D to bookmark this page.")
            }
        }

        function n(e) {
            e.preventDefault();
            var t = 400,
                a = h(($(window).width() - 400) / 2),
                i = h(($(window).height() - t) / 2),
                n = window.JsConstants.room.url ? window.location.origin + "/room/url/" + window.JsConstants.room.url : window.location.href,
                l = e.currentTarget.href + encodeURIComponent(n),
                o = window.open(l, "Social Share", "width=400,height=" + t + ",left=" + a + ",top=" + i + ",location=0,menubar=0,toolbar=0,status=0,scrollbars=1,resizable=1");
            o && o.focus()
        }
        this.tiles = [];
        var l = this,
            o = !1;
        this.showAlert = function(e, t) {
                e && ("warning" === t ? this.alertWarning(e) : "success" === t ? this.alertSuccess(e) : "danger" === t ? this.alertDanger(e) : "error" === t ? this.alertError(e) : this.alert(e))
            }, this.alertWarning = function(e) {
                window.$("#warningAlertBox").html("<strong>Warning!</strong> " + e), window.$("#warningAlertBox").fadeIn()
            }, this.alertSuccess = function(e) {
                window.$("#successAlertBox").html("<strong>Success!</strong> " + e), window.$("#successAlertBox").fadeIn()
            }, this.alertDanger = function(e) {
                window.$("#dangerAlertBox").html("<strong>Danger!</strong> " + e), window.$("#dangerAlertBox").fadeIn()
            }, this.alertError = function(e) {
                window.$("#dangerAlertBox").html("<strong>Error!</strong> " + e), window.$("#dangerAlertBox").fadeIn()
            }, this.alert = function(e) {
                window.$("#infoAlertBox").html("<strong>Info!</strong> " + e), window.$("#infoAlertBox").fadeIn()
            }, this.isMobileDevice = function() {
                return r.isMobileDevice()
            }, this.topPanelSlide = function(e) {
                "boolean" == typeof e && e ? !o && (o = !0, window.$("#topPanel").animate({
                    right: 0
                }, "fast"), window.$("#topPanelHideIcon").removeClass("glyphicon-triangle-left").addClass("glyphicon-triangle-right")) : o && (o = !1, window.$("#topPanel").animate({
                    right: -400
                }, "fast"), window.$("#topPanelHideIcon").removeClass("glyphicon-triangle-right").addClass("glyphicon-triangle-left"))
            }, this.topPanelToggle = function() {
                l.topPanelSlide(!o)
            }, this.topPanelHide = function() {
                l.topPanelSlide(!1)
            }, this.topPanelShow = function() {
                l.topPanelSlide(!0)
            }, this.switchTopPanel = function(e) {
                var t = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : "",
                    a = document.getElementById(e);
                a.style.display !== t && (a.style.display = t);
                ["topPanel", "topPanelCeilingColor", "productInfoPanel"].forEach(function(e) {
                    var t = document.getElementById(e);
                    t && t !== a && (t.style.display = "none")
                })
            }, this.changeGroutSizeText = function(e, t) {
                t === void 0 && (t = e && e.currentTarget && e.currentTarget.value), document.getElementById("topPanelGroutSizeText").innerHTML = t + " mm"
            }, this.changeGroutSize = function(e) {
                var t = document.getElementById("topPanelGroutSizeRange"); + t.value !== +e && (t.value = e, this.changeGroutSizeText(void 0, e))
            }, this.addTilesToList = function(e) {
                "z-a" === e ? t("name", -1) : "newest first" === e ? t("created_at", -1) : "oldest first" === e ? t("created_at", 1) : t("name", 1)
            }, this.changeTilesSort = function() {
                l.addTilesToList(this.value)
            }, this.hideTilesPreloader = function() {
                document.getElementById("loadTilesAnimationContainer").style.display = "none"
            }, this.addProductInfo = function(e, t) {
                var i = document.getElementById("productInfoTilesList");
                i.innerHTML = "", e.size && (i.innerHTML = "<div class=\"top-panel-label\">Room size: " + e.size.x / 1e3 + "m \xD7 " + e.size.z / 1e3 + "m, Height: " + e.size.y / 1e3 + "m</div>"), e.tiledSurfaces.forEach(function(n, l) {
                    var o = n.tileIndex !== void 0 || n.tile2Index !== void 0 || n.freeDesignTiles && 0 < n.freeDesignTiles.length;
                    if (o) {
                        var s = document.createElement("p"),
                            r = [];
                        n.name || (e.surfaceTypes && n.type ? n.name = e.surfaceTypes[n.type] : n.type ? n.name = n.type : n.name = "Surface " + (1 + l)), s.className = "top-panel-label", s.textContent = m.lang(n.name), i.appendChild(s), n.tileIndex !== void 0 && (i.appendChild(a(t[n.tileIndex])), r.push({
                            id: t[n.tileIndex].id,
                            custom: t[n.tileIndex].custom
                        })), n.tile2Index !== void 0 && n.tile2Index !== n.tileIndex && (i.appendChild(a(t[n.tile2Index])), r.push({
                            id: t[n.tile2Index].id,
                            custom: t[n.tile2Index].custom
                        })), n.freeDesignTiles && n.freeDesignTiles.forEach(function(e) {
                            var n = r.some(function(t) {
                                return e.id === t.id && e.custom === t.custom
                            });
                            if (!n) {
                                var l = t.getById(e.id, e.custom);
                                i.appendChild(a(l)), r.push({
                                    id: e.id,
                                    custom: e.custom
                                })
                            }
                        })
                    }
                })
            }, this.changeFullScreenMode = function(e) {
                (document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || !1 === e) && !0 !== e ? document.cancelFullScreen ? document.cancelFullScreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitCancelFullScreen && document.webkitCancelFullScreen() : document.documentElement.requestFullscreen ? document.documentElement.requestFullscreen() : document.documentElement.mozRequestFullScreen ? document.documentElement.mozRequestFullScreen() : document.documentElement.webkitRequestFullscreen && document.documentElement.webkitRequestFullscreen(window.Element.ALLOW_KEYBOARD_INPUT)
            }, this.showAdditionalOptions = function(t) {
                if (!e || !e.currentTiledSurface) return void l.showAlert("Surface not selected. To select surface click on wall or floor.", "warning");
                var a = !$(t.currentTarget).hasClass("top-panel-button-active");
                if ($(".top-panel-button").removeClass("top-panel-button-active"), $(".top-panel-option-box").hide(), a) switch ($(t.currentTarget).addClass("top-panel-button-active"), t.currentTarget.id) {
                    case "btnLayout":
                        $("#topPanelLayout").show(); 
                        break;
                    case "btnGrout":
                        $("#topPanelGrout").show();
                        break;
                    case "btnRefine":
                        "function" == typeof l.filtersShow && ($("#topPanelFilter").show(), l.filtersShow());
                }
            }, this.updateSkewSizeButtons = function(e) {
                $(".radio-skew-size input").attr("disabled", !(2 === e || 3 === e))
            }, this.updateSkewSize = function(e) {
                $(".radio-skew-size input").each(function(t, a) {
                    a.checked = a.value === e + ""
                })
            }, this.updateValues = function(e) {
                l.changeGroutSize(e.groutSize), document.getElementById("topPanelCheckFreeDesign").checked = e.freeDesign, document.getElementById("topPanelSurfaceRotation_" + e.rotation).checked = !0, document.getElementById("topPanelSurfacePattern_" + e.fillTypeIndex).checked = !0, l.updateSkewSize(e.skewSize), l.updateSkewSizeButtons(e.fillTypeIndex)
            },
            function() {
                $("#topPanelHideBtn").click(l.topPanelToggle), $("#topPanelGroutSizeRange").on("input", l.changeGroutSizeText), $("#topPanelTilesSort").change(l.changeTilesSort), $("#bottomMenuFullScreen").click(l.changeFullScreenMode), $(".top-panel-button").click(l.showAdditionalOptions), $("#bookmarkSavedRoomLink").click(i), l.isMobileDevice() && $(".copyright").remove(), $(".social-share > a").click(n), $("#bottomMenuMail").click(n)
            }()
    }

    function d(e, t) {
        var a = "",
            i = 1;
        return e.forEach(function(n, l) {
            0 == l % (t || 4) && 0 < l && (a += "\n", i += 1), a += n, l < e.length - 1 && (a += " / ")
        }), {
            text: a,
            lines: i
        }
    }
    // Redo Undo code 

    
    // var history = [];
    // var historyMods = 0;
    // canvas.trigger('object:added', historyChanged);
    // canvas.trigger('object:modified', historyChanged);
    // canvas.trigger('object:removed', historyChanged);
    // function historyChanged() {
    //     console.log('execute history function');
    //     var canvasContents = canvas.toJSON();
    //     history.push(canvasContents);
    //     historyMods = 0;
    //   }  
    //   function undo() {
    //     var canvas = new fabric.Canvas('td-custom-tile');
    //     console.log('Trigger history =',history);
    //    // var canvas = new fabric.Canvas('td-custom-tile');
    //     //canvas.clear().renderAll();
    //   }
    //   function redo() {
    //     console.log('execute undo function');
    //     if (historyMods > 0) {
    //       var nextHistoryObj = history[history.length - 1 - historyMods +1];
    //       canvas.loadFromJSON(nextHistoryObj, () => {
    //         historyMods --;
    //       });
    //     }
    //   } 
    function updateTile(s,t){
        console.log('history =',history);
        undo()
    
    }

    function g(e, t) {
        var a = t.getUsedNames(),
            i = d(a),
            n = e.toCanvas();
        if (n) {
            var l = new jsPDF,
                o = 0,
                s = 19,
                r = u.getLogo(),
                g = u.getFitSizes(r, 82, s, !1);
            l.addImage(r, "JPEG", 14 + g.left + 50, o += 16, g.width, g.height), l.setFontSize(16), l.text("Custom Color Scheme", 105, o += s + 10, "center"), l.text(e.name, 105, o += 10, "center");
            var c = 55;
            if (o += 5, "hexagon" === e.tile.shape) {
                var h = 100 * v,
                    p = u.setBackground(n);
                l.addImage(p, "JPEG", c, o, 100, h), o += h
            } else l.addImage(n, "JPEG", c, o, 100, 100), o += 100;
            o += 5, l.setFontSize(9).setFontType("bold"), l.text(" ", c - 5, o += 5), l.text("Colors:", c - 5, o += 5),l.text("", 50, 185, ""),l.text("", 50, 190, "").setFontType('normal'),l.text("Please note that the pattern and colors shown in this file are", 60, 195, "").setTextColor('#000000'), l.text("computer generated and may vary from the actual handmade ", 60, 200, "").setTextColor('#000000'),l.text("product. We recommend proceeding with a physical sample prior", 60, 205, "").setTextColor('#000000'),l.text("to placing an order.", 60, 210, "").setTextColor('#000000'),l.text("To proceed with a formal quotation, please send us an email at", 60, 220, "").setTextColor('#0000ff'),l.text("inquire@machucatile.com", 60, 225, "").setTextColor('#000000'), l.text("or send us a message on our", 98, 225, "").setTextColor('#000000').setTextColor('#000000'),l.text("Facebook (www.facebook.com/machucatile) or Instagram", 60, 230, "").setTextColor('#000000'),l.text("", 120, 230, ""),l.text("(@machucatile) pages along with your selection.", 60, 235, "").setTextColor('#000000'), l.text(i.text, c - 5 + 12, o), o += 15, l.text("", 14, o), o += 25, l.text("", 109, o), o += 25, l.rect(109, o - 0, 0, 0), l.text("", 109, o), l.text("www.machucatile.com       inquire@machucatile.com", 105, 281, "center"), l.save(m.APP_COLORIZER_NAME + " - " + e.name + ".pdf")
        }
    }

    function c() {
        function e(e) {
            if ("string" == typeof e) {
                var t;
                return i.some(function(a) {
                    if (-1 !== e.search(a.hexRegExp)) return t = a, !0
                }), t
            }
        }

        function t(e) {
            if ("string" == typeof e) {
                var t = e.replace("#", "");
                return 6 > t.length && (t = t[0] + t[0] + t[1] + t[1] + t[2] + t[2]), [parseInt(e[0] + e[1], 16) || 0, parseInt(e[2] + e[3], 16) || 0, parseInt(e[4] + e[5], 16) || 0, 255]
            }
            return [0, 0, 0, 255]
        }
        var a = this,
            n = document.getElementById("tilesDesignerUsedColors");
            //console.log('All color listed', n);
        this.used = [];
        var i = TilesDesignerColorsCatalog || [];
        this.selected = i[0], this.hexFromArray = function(e) {
                var t = e[0].toString(16) || "00",
                    a = e[1].toString(16) || "00",
                    i = e[2].toString(16) || "00";
                return (2 === t.length ? t : "0" + t) + (2 === a.length ? a : "0" + a) + (2 === i.length ? i : "0" + i)
            }, this.getUsedNames = function() {
                return this.used.map(function(t) {
                    var a = e(t);
                    return a ? a.name : t
                })
            }, this.isEqual = function(e, t, a) {
                return e[0] === t[a] && e[1] === t[a + 1] && e[2] === t[a + 2] && e[3] === t[a + 3]
            }, this.isUsed = function(e, t, a) {
                var i = this;
                return e.some(function(e) {
                    return i.isEqual(e, t, a)
                })
            }, this.updateUsedList = function(e) {
                for (var t = this, a = [], l = e.getContext("2d"), o = l.getImageData(0, 0, e.width, e.height).data, s = 0; s < o.length; s += 4) this.isUsed(a, o, s) || a.push([o[s], o[s + 1], o[s + 2], o[s + 3]]);
                this.used = [], a.forEach(function(e) {
                    var a = t.hexFromArray(e),
                        i = -1 !== a.search(/000000/),
                        n = -1 !== a.search(/ffffff/i);
                    i || n || t.used.push(a)
                }), n.textContent = this.getUsedNames().join(", ")
               //console.log('Update Color Used List',this.used);
               //console.log(this.selected);
               
            },
            function() {
                var e = $("#colors-container");
                i.forEach(function(i) {
                  i.hexRegExp = new RegExp(i.hex, "i"), i.arr = t(i.hex);
                  var n = i.name || i.hex,
                      l = $("<div style=\"background-color: #" + i.hex + ";\" data-tooltip=\"" + n + "\"></div>");
                  l.click(function() {
                   // console.log('Color is selected to draw');
                    a.selected = i
                  }), e.append(l)
                });
                
                var colorDivs = document.querySelectorAll('#colors-container div');
              
                colorDivs.forEach(function(div) {
                  var tooltip = document.createElement('div');
                  tooltip.className = 'Colortooltip';
                  tooltip.innerHTML = div.dataset.tooltip;
                  div.appendChild(tooltip);
              
                  div.addEventListener('mouseenter', function() {
                    tooltip.classList.add('active');
                  });
              
                  div.addEventListener('mouseleave', function() {
                    tooltip.classList.remove('active');
                  });
                });
              }();
              
    }
    var h = Math.floor;
    (function() {
        this.extractNameFromUrl = function(e) {
            var t = "string" == typeof e ? e : this.file;
            if (t && "string" == typeof t) {
                var a = t.match(/[^/]+(?=\.\w+$)/)[0].replace("_", " ");
                return a.charAt(0).toUpperCase() + a.slice(1)
            }
            return "Tile"
        }, this.hasSuggestion = function(e) {
            return "number" == typeof e ? Array.isArray(this.suggestions) && this.suggestions[e] : Array.isArray(this.suggestions) && 0 < this.suggestions.length
        };
        var e = [];
        this.updateSuggestions = function() {
            var t = this;
            e.forEach(function(e, a) {
                if (e.html(""), t.hasSuggestion(a)) {
                    var i = $("<img src=\"" + t.suggestions[a] + "\">");
                    e.append(i)
                }
            })
        }
    }).call(e.prototype), t.prototype = Object.create(e.prototype),
        function() {
            this.blank = !0, this.createElement = function(e) {
                return this.$element = $("<div><img src=\"" + (this.icon || this.file) + "\" title=\"" + this.name + "\"></div>").click(e), this.$element
            }, this.displayByShape = function(e) {
                e && e === this.shape ? this.$element.css("display", "unset") : this.$element.css("display", "none")
            }, this.addSuggestion = function(e) {
                Array.isArray(this.suggestions) || (this.suggestions = []), this.suggestions.push(e)
            }
        }.call(t.prototype), a.prototype = Object.create(e.prototype),
        function() {
            this.parseSettings = function(e) {
                if (e && "string" == typeof e) {
                    this.settings = e;
                    var t = JSON.parse(e);
                    t.baseTileUrl && (this.baseTileUrl = t.baseTileUrl), t.usedColorNames && (this.usedColorNames = t.usedColorNames)
                }
            }, this.createElement = function(e) {
                var t = this;
                this.image = $("<img src=\"" + t.file + "\" draggable=\"true\" class=\"draggable\" title=\"" + t.name + "\">")[0], this.image.tile = this;
                var a = $("<div/>").append(this.image).click(e),
                    i = $("<button>&times;</button>").click(function(e) {
                        e.stopPropagation(), $.get("/customtile/remove/" + t.id, function() {
                            a.remove(), window.TracingIdea && window.TracingIdea.TileVisualizer && "function" == typeof window.TracingIdea.TileVisualizer.removeTile && window.TracingIdea.TileVisualizer.removeTile(t.id, !0)
                        })
                    });
                return a.append(i), this.$element = a, this.$element
            }, this.setSuggestions = function(e) {
                e && e.hasSuggestion && (this.suggestions = e.suggestions)
            }
        }.call(a.prototype);
    var u = function() {
            function e(e) {
                var category =  $("#category").val();
                return e.naturalWidth || e.width || 0
            }

            function t(e) {
               return e.naturalHeight || e.height || 0
            }

            function a(e) {
                var t = e.toDataURL("image/jpeg").slice(23);
                return atob(t)
            }

            function i(e, t, a) {
              //  console.log('iiiiiii',i)
                //console.log('Created image path');
                //console.log('width==',t);
                //console.log('height==',a);
                var category =  $("#category").val();
                var i = document.createElement("canvas");
                i.width = t, i.height = a;
                var n = i.getContext("2d");
                if(category == '2 - Risers'){
                     //return n.drawImage(e, 0, 0,150,81),i
                    return n.drawImage(e, 0, 0, i.width, i.height), i
                } else{
                    return n.drawImage(e, 0, 0, i.width, i.height), i
                }
            }

            function n(a, l, o) {
                var s = e(a),
                    r = t(a);
                if (s <= 2 * l || r <= 2 * o) return i(a, l, o);
                var d = i(a, s / 2, r / 2);
                return n(d, l, o)
            }

            function l(e, t, a, i) {
               // console.log('set height and width for canvass');
                var n = {
                    left: 0,
                    top: 0,
                    width: e,
                    height: t
                };
                if (e < a && t < i) n.left = h((a - n.width) / 2), n.top = h((i - n.height) / 2);
                else if (a && i) {
                    var l = e / t;
                    a / i > l ? (n.height = i, n.width = i * l) : (n.width = a, n.height = a / l), n.width < a && (n.left = h((a - n.width) / 2)), n.height < i && (n.top = h((i - n.height) / 2))
                }
                return n
            }

            function o(e, t, i, n, o, s) {
                //console.log('Set Height and width of image===============');
                var r = l(t, i, n, o),
                    d = document.createElement("canvas");
                d.width = h(n), d.height = h(o);

                var g = d.getContext("2d");
                return g.fillStyle = "white", g.fillRect(0, 0, d.width, d.height), g.drawImage(e, r.left, r.top, r.width, r.height), s ? d : a(d)
            }
            return {
                steppedResize: n,
                rotate: function(a, i, n) {
                    if (a) {
                        var l = document.createElement("canvas"),
                            o = l.getContext("2d"),
                            s = n && n.background,
                            r = 2 * Math.max(l.width, l.height);
                        return s && (o.fillStyle = n.background), 180 === i ? (l.width = e(a), l.height = t(a), s && o.fillRect(-r, -r, r, r), o.rotate(Math.PI), o.drawImage(a, -l.width, -l.height, l.width, l.height)) : 270 === i ? (l.width = t(a), l.height = e(a), s && o.fillRect(-r, -r, r, r), o.rotate(4.71238898038469), o.drawImage(a, -l.height, 0, l.height, l.width)) : (l.width = t(a), l.height = e(a), s && o.fillRect(-r, -r, r, r), o.rotate(1.5707963267948966), o.drawImage(a, 0, -l.width, l.height, l.width)), (o.setTransform(1, 0, 0, 1, 0, 0), l)
                    }
                },
                adjustImage: function(a, i, n) {
                    return o(a, e(a), t(a), i, n, !0)
                },
                toCanvas: function(a) {
                    //console.log('Created Canvas');
                    var i = document.createElement("canvas");
                    i.width = e(a), i.height = t(a);
                    var n = i.getContext("2d");
                    return n.fillStyle = "white", n.fillRect(0, 0, i.width, i.height), n.drawImage(a, 0, 0, i.width, i.height), i
                },
                getLogo: function(a, i) {
                    var n = document.getElementById("companyLogo");
                    return a || i ? o(n, e(n), t(n), a, i, !0) : this.toCanvas(n)
                },
                toDataURL: function(e) {
                    var t = this.toCanvas(e);
                    return t.toDataURL("image/png")
                },
                setBackground: function(a, i) {
                    var n = document.createElement("canvas"),
                        l = n.getContext("2d");
                    return n.width = e(a), n.height = t(a), l.fillStyle = i || "#ffffff", l.fillRect(0, 0, n.width, n.height), l.drawImage(a, 0, 0, n.width, n.height), n
                },
                load: function(e, t, a) {
                    if ("function" == typeof t)
                        if (e && "string" == typeof e) {
                            var i = new Image;
                            i.onload = function() {
                                t(i)
                            }, i.src = e
                        } else if (Array.isArray(e) && 0 < e.length) {
                        var n = [],
                            l = 0;
                        if (!0 === a) {
                            var o = 0;
                            e.forEach(function(e) {
                                var a;
                                e && "string" == typeof e && (l += 1, a = new Image, a.onload = function() {
                                    o += 1, o === l && t(n)
                                }, a.onerror = function() {
                                    o += 1, o === l && t(n)
                                }, a.src = e), n.push(a)
                            })
                        } else e.forEach(function(e) {
                            if (e && "string" == typeof e) {
                                l += 1;
                                var a = new Image;
                                a.onload = function() {
                                    n.push(a), n.length === l && t(n)
                                }, a.src = e
                            }
                        })
                    } else t()
                },
                getFitSizes: function(a, i, n) {
                    var l = !(3 < arguments.length && arguments[3] !== void 0) || arguments[3],
                        o = e(a),
                        s = t(a);
                    if (!l && o < i && s < n) return {
                        width: o,
                        height: s,
                        left: (i - o) / 2,
                        top: (n - s) / 2
                    };
                    if (o / s >= i / n) {
                        var r = s * (i / o);
                        return {
                            width: i,
                            height: r,
                            left: 0,
                            top: (n - r) / 2
                        }
                    }
                    var d = o * (n / s);
                    return {
                        width: d,
                        height: n,
                        left: (i - d) / 2,
                        top: 0
                    }
                }
            }
        }(),
        p = function() {
            var e = [];
            return {
                clear: function() {
                    e = []
                },
                add: function(t) {
                    -1 === e.indexOf(t) && e.push(t)
                },
                get: function() {
                    return e
                }
            }
        }(),
        m = {
            shapes: {
                square: "Square",
                rectangle: "Rectangle",
                diamond: "Diamond",
                hexagon: "Hexagonal"
            }
        },
        f = window.JsConstants && window.JsConstants.lang;
    Object.assign(m, f.default), m.lang = function(e, t) {
        if (!e) return "";
        if (f.current) {
            var a = f.current[e];
            if ("string" == typeof a) return s(a, t)
        }
        if (f.default) {
            var i = f.default[e];
            if ("string" == typeof i) return s(i, t)
        }
        return s(e, t)
    }, r.roomCanvas = document.getElementById("roomCanvas"), r.updateCanvasStyle = function(e) {
        e && "string" == typeof e ? (r.roomCanvas.title = "Change " + e, r.roomCanvas.style.cursor = "url(\"/img/icons/brush.png\") 18 46, pointer") : (r.roomCanvas.title = "", r.roomCanvas.style.cursor = "unset")
    }, r.isMobileDevice = function() {
        return !!(navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/Opera Mini/i) || navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/Windows Phone/i))
    };
    var w = 14,
        v = 1.1547005383792517;
    window.addEventListener("load", function() {
        
        //console.log('Grid event');
        var e = new c,
            t = new n("td-custom-tile", e),
            a = new o("tilesGrid", t);
        t.update = function() {
           // console.log('this function is reserved for update');
           // console.log('Update Fill Color Values after color add');
           // console.log('color array value', e.used);  
           // updateTile(e);
            a.update()
        };
        var i = new l(function(e) {
           // console.log('Fill Color Values  after color add');
            t.load(e), a.fill(e)
        });
        $('#tilesDesigner').modal({backdrop: 'static', keyboard: false
        }),
        $("#titleDesignerUndoBtn").click(function(){
            
           //console.log('clicked on undo function');

            updateTile(e,t)
           /* t.save(function(e){
                i.add(e)
            })*/ 
        }),$("#titleDesignerRedoBtn").click(function(e){
            console.log('clicked on redo function');
           /* t.save(function(e){
                i.add(e)
            })*/ 
        }),$("#tilesDesignerClearBtn").click(function() {
             
             $('#edit-wrap canvas').css('visibility','hidden');
             $('.canvas-container').css('visibility','hidden'); 
             $(this).attr('disabled',true);
             // t.load(e); 
            //i.add(e);
            
           // t.load(e);
           //t.renderAll();
            
        }),$("#tilesDesignerSaveBtn").click(function() {
            t.save(function(e) {
                i.add(e)
            })
        }), $("#tilesDesignerDownloadBtn").click(function() {
            g(t, e)
        }), $("#tilesDesignerVisualizeBtn").click(function() {
            t.save(function(e) {
                i.add(e)
            })
        }), tilesDesignerShowOnload && $("#tilesDesigner").modal("show")
    })
})();